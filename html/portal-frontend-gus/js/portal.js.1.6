var Portal = Class.create();
Portal.prototype = {
  initialize: function (options) {
    this.setOptions(options);
    console.log('.' + this.options.column)
    console.log('#' + this.options.portal)
    console.log('.' + this.options.block)
    //var sortables = document.getElementsByClassName(
    var sortables = $$('.' + this.options.column, '#' + this.options.portal);
    console.log(sortables)
    function alerta(nome) {
    	alert(nome);
    }
    /*
    var myArray = ['one', 'two', 'three'];
    myArray.each(function(sortable) {
  		alert(sortable);
	});
	console.log(Object.isArray(myArray))
	*/
	
	/*
	console.log(Object.isArray(sortables))
    sortables.each(function(sortable) {
  		alert(sortable);
	});
    */
    
    sortables.each(function (sortable) {
      Sortable.create(sortable, { 
        containment: sortables,
        constraint: false,
        tag: 'div',
        only: this.options.block,
        dropOnEmpty: true,
        handle: this.options.handle,
        hoverclass: this.options.hoverclass,
        onUpdate: function (container) {
          if (!this.options.saveurl) {
            return;
          }
          if (container.id == this.options.blocklist) {
            return;
          }
          var url = this.options.saveurl;
          var postBody = container.id + ':';
          console.log('container: ' + container)
          //var blocks = document.getElementsByClassName(this.options.block, container);
          var blocks = $$('.' + this.options.block, container);          
          postBody += blocks.pluck('id').join(',');
          postBody = 'value=' + escape(postBody);
          
          new Ajax.Request(url, {
              method: 'post',
              postBody: postBody
            }
          );
        }.bind(this)
      });
    }.bind(this));
    
    //var blocks = document.getElementsByClassName(this.options.block, this.options.portal);
    var blocks = $$('.' + this.options.block, '#' + this.options.portal);
    blocks.each(
      function (block) {
        //var content = Element.getElementsByClassName(block, this.options.content, true);
        //var toggle = Element.getElementsByClassName(block, this.options.toggle, true);
        var content = $$(block, '.' + this.options.content, true);
        var toggle = $$(block, '.' + this.options.toggle, true);
        
        Event.observe(
          toggle, 'click', 
          function (e) { Effect.toggle(content, 'Slide'); },
          false
        );
        
      }.bind(this)
    );
    
    Event.observe(
      this.options.blocklistlink, 'click', 
      this.displayBlockList.bindAsEventListener(this), 
      false
    );

    new Draggable(this.options.blocklist, {
        handle: this.options.blocklisthandle
      }
    );
    
  },

  displayBlockList: function (e) {
    Effect.toggle(this.options.blocklist);
    Event.stop(e);
  },

  setOptions: function (options) {
    this.options = {
      portal: 'portal',
      column: 'portal-column',
      block: 'block',
      content: 'content',
      handle: 'handle',
      hoverclass: 'block-hover',
      toggle: 'block-toggle',
      blocklist: 'portal-column-block-list',
      blocklistlink: 'portal-block-list-link',
      blocklisthandle: 'block-list-handle',
      saveurl: ''
    }
    Object.extend(this.options, options || {});
  },

  applySettings: function (settings) {
    for (var container in settings) {
      settings[container].each(function (block) {
        $(container).appendChild($(block));
      });
    }
  }
}

